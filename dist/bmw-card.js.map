{"mappings":";;;;IEEA,2CAAe,CAAA,GAAA,UAAE,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCnB,CAAC;;;ADvCM,MAAM,kDAAgB,CAAA,GAAA,iBAAS;IAClC,mBAAmB;IACnB,MAAM;IAEN,2BAA2B;IAC3B,WAAW,aAAa;QACpB,OAAO;YACH,SAAS;gBAAE,OAAO;YAAK;YACvB,SAAS;gBAAE,OAAO;YAAK;YACvB,OAAO;gBAAE,OAAO;YAAK;YACrB,QAAQ;gBAAE,OAAO;YAAK;YACtB,SAAS;gBAAE,OAAO;YAAK;QAC3B;IACJ;IAEA,sBAAsB;IACtB,UAAU,MAAM,EAAE;QACd,IAAI,CAAC,OAAO,GAAG,OAAO,MAAM,KAAK,KAAK,CAAA,GAAA,cAAM,IAAI,OAAO,MAAM;QAC7D,IAAI,CAAC,OAAO,GAAG,OAAO,MAAM;QAC5B,4DAA4D;QAC5D,8CAA8C;QAC9C,IAAI,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK;IAE9B;IAEA,IAAI,KAAK,IAAI,EAAE;QACX,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,MAAM,GAAG,KAAK,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACvC,IAAI,IAAI,CAAC,MAAM,EAAE;YACb,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK;YAChC,IAAI,KAAK,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,aAAa;YAC7C,IAAI,CAAC,KAAK,GAAG,KAAK,KAAK,IAAI,CAAC,OAAO;QACvC;IACJ;IAEA,mBAAmB;IACnB,OAAO,UAAS,GAAA,0CAAO;IAEvB,SAAS;QACL,QAAQ,GAAG,CAAC;QACZ,IAAI;QACJ,IAAI,CAAC,IAAI,CAAC,MAAM,EACZ,UAAU,CAAA,GAAA,WAAG,CAAC,CAAC;;oBAEP,EAAE,IAAI,CAAC,OAAO,CAAC;;YAEvB,CAAC;aAED,UAAU,CAAA,GAAA,WAAG,CAAC,CAAC;;mCAEQ,EAAE,IAAI,CAAC,KAAK,CAAC;2CACL,EAAE,IAAI,CAAC,QAAQ,CAAC;4CACf,EAAE,IAAI,CAAC,OAAO,CAAC;;;4CAGf,EAAE,IAAI,CAAC,OAAO,CAAC;;;YAG/C,CAAC;QAEL,OAAO,CAAA,GAAA,WAAG,CAAC,CAAC;6BACS,EAAE,IAAI,CAAC,OAAO,CAAC;;oBAExB,EAAE,QAAQ;;;QAGtB,CAAC;IACL;IAEA,iBAAiB;IACjB,SAAS,KAAK,EAAE;QACZ,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,iBAAiB,UAAU;YAC9C,WAAW,IAAI,CAAC,OAAO;QAC3B;IACJ;IAEA,qBAAqB;IACrB,OAAO,mBAAmB;QACtB,OAAO,SAAS,aAAa,CAAC;IAClC;IAEA,OAAO,gBAAgB;QACnB,OAAO;YACH,QAAQ;YACR,QAAQ;QACZ;IACJ;AACJ;;;;AEzFO,MAAM,kDAAsB,CAAA,GAAA,iBAAS;IACxC,WAAW,aAAa;QACpB,OAAO;YACH,YAAY;YACZ,SAAS;gBAAE,OAAO;YAAK;QAC3B;IACJ;IAEA,UAAU,MAAM,EAAE;QACd,IAAI,CAAC,OAAO,GAAG;IACnB;IAEA,OAAO,SAAS,CAAA,GAAA,UAAE,CAAC,CAAC;;;;;;;;;;;QAWhB,CAAC,CAAC;IAEN,SAAS;QACL,OAAO,CAAA,GAAA,WAAG,CAAC,CAAC;;;;;iCAKa,EAAE,IAAI,CAAC,kBAAkB,CAAC;8DACG,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;;;;;iCAKnD,EAAE,IAAI,CAAC,kBAAkB,CAAC;8DACG,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;;;QAG5E,CAAC;IACL;IAEA,mBAAmB,YAAY,EAAE;QAC7B,wCAAwC;QACxC,IAAI,YAAY,OAAO,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO;QAC9C,IAAI,aAAa,MAAM,CAAC,EAAE,IAAI,UAC1B,UAAU,MAAM,GAAG,aAAa,MAAM,CAAC,KAAK;aACzC,IAAI,aAAa,MAAM,CAAC,EAAE,IAAI,UACjC,UAAU,MAAM,GAAG,aAAa,MAAM,CAAC,KAAK;QAEhD,MAAM,eAAe,IAAI,YAAY,kBAAkB;YACnD,QAAQ;gBAAE,QAAQ;YAAU;YAC5B,SAAS;YACT,UAAU;QACd;QACA,IAAI,CAAC,aAAa,CAAC;IACvB;AACJ;;;AH1DA,eAAe,MAAM,CAAC,mBAAmB,CAAA,GAAA,yCAAY;AACrD,eAAe,MAAM,CAAC,YAAY,CAAA,GAAA,yCAAM;AAExC,OAAO,WAAW,GAAG,OAAO,WAAW,IAAI,EAAE;AAC7C,OAAO,WAAW,CAAC,IAAI,CAAC;IACpB,MAAM;IACN,MAAM;IACN,SAAS;IACT,aAAa;IACb,kBAAkB;AACtB","sources":["src/index.js","src/bmw-card.js","src/bmw-card.styles.js","src/bmw-card-editor.js"],"sourcesContent":["import { BmwCard } from \"./bmw-card\";\nimport { BmwCardEditor } from \"./bmw-card-editor\";\n\ncustomElements.define(\"bmw-card-editor\", BmwCardEditor);\ncustomElements.define(\"bwm-card\", BmwCard);\n\nwindow.customCards = window.customCards || [];\nwindow.customCards.push({\n    type: \"bmw-card\",\n    name: \"BMW Card\",\n    preview: false,\n    description: \"BMW Card to show car data from Connected Drive integration.\",\n    documentationURL: \"https://github.com/Jarflux/homeassistant-bmw-card/blob/master/README.md\",\n});","import { html, LitElement, nothing } from 'lit';\nimport styles from './bmw-card.styles';\n\nexport class BmwCard extends LitElement {\n    // private property\n    _hass;\n\n    // internal reactive states\n    static get properties() {\n        return {\n            _header: { state: true },\n            _entity: { state: true },\n            _name: { state: true },\n            _state: { state: true },\n            _status: { state: true }\n        };\n    }\n\n    // lifecycle interface\n    setConfig(config) {\n        this._header = config.header === \"\" ? nothing : config.header;\n        this._entity = config.entity;\n        // call set hass() to immediately adjust to a changed entity\n        // while editing the entity in the card editor\n        if (this._hass) {\n            this.hass = this._hass\n        }\n    }\n\n    set hass(hass) {\n        this._hass = hass;\n        this._state = hass.states[this._entity];\n        if (this._state) {\n            this._status = this._state.state;\n            let fn = this._state.attributes.friendly_name;\n            this._name = fn ? fn : this._entity;\n        }\n    }\n\n    // declarative part\n    static styles = styles;\n\n    render() {\n        console.log(\"RENDER\");\n        let content;\n        if (!this._state) {\n            content = html`\n                <p class=\"error\">\n                    ${this._entity} is unavailable.\n                </p>\n            `;\n        } else {\n            content = html`\n                <dl class=\"dl\">\n                    <dt class=\"dt\">${this._name}</dt>\n                    <dd class=\"dd\" @click=\"${this.doToggle}\">\n                        <span class=\"toggle ${this._status}\">\n                            <span class=\"button\"></span>\n                        </span>\n                        <span class=\"value\">${this._status}</span>\n                    </dd>\n                </dl>\n            `;\n        }\n        return html`\n            <ha-card header=\"${this._header}\">\n                <div class=\"card-content\">\n                    ${content}\n                </div>\n            </ha-card>\n        `;\n    }\n\n    // event handling\n    doToggle(event) {\n        this._hass.callService(\"input_boolean\", \"toggle\", {\n            entity_id: this._entity\n        });\n    }\n\n    // card configuration\n    static getConfigElement() {\n        return document.createElement(\"bmw-card-editor\");\n    }\n\n    static getStubConfig() {\n        return {\n            entity: \"input_boolean.tcl\",\n            header: \"\",\n        };\n    }\n}","import { css } from 'lit';\n\nexport default css`\n    .error {\n        color: red;\n    }\n    .dl {\n        display: grid;\n        grid-template-columns: repeat(2, minmax(0, 1fr));\n    }\n    .dt {\n        display: flex;\n        align-content: center;\n        flex-wrap: wrap;\n    }\n    .dd {\n        display: grid;\n        grid-template-columns: repeat(2, minmax(0, auto) minmax(0, 2fr));\n        margin: 0;\n    }\n    .toggle {\n        padding: 0.6em;\n        border: grey;\n        border-radius: 50%;\n    }\n    .toggle.on { background-color: green; }\n    .toggle.off{ background-color: red; }\n    .button {\n        display: block;\n        border: outset 0.2em;\n        border-radius: 50%;\n        border-color: silver;\n        background-color: silver;\n        width: 1.4em;\n        height: 1.4em;\n    }\n    .value {\n        padding-left: 0.5em;\n        display: flex;\n        align-content: center;\n        flex-wrap: wrap;\n    }\n`;","import { css, html, LitElement } from 'lit';\n\nexport class BmwCardEditor extends LitElement {\n    static get properties() {\n        return {\n            // hass: {},\n            _config: { state: true },\n        };\n    }\n\n    setConfig(config) {\n        this._config = config;\n    }\n\n    static styles = css`\n            .table {\n                display: table;\n            }\n            .row {\n                display: table-row;\n            }\n            .cell {\n                display: table-cell;\n                padding: 0.5em;\n            }\n        `;\n\n    render() {\n        return html`\n            <form class=\"table\">\n                <div class=\"row\">\n                    <label class=\"label cell\" for=\"header\">Header:</label>\n                    <input\n                        @change=\"${this.handleChangedEvent}\"\n                        class=\"value cell\" id=\"header\" value=\"${this._config.header}\"></input>\n                </div>\n                <div class=\"row\">\n                    <label class=\"label cell\" for=\"entity\">Entity:</label>\n                    <input\n                        @change=\"${this.handleChangedEvent}\"\n                        class=\"value cell\" id=\"entity\" value=\"${this._config.entity}\"></input>\n                </div>\n            </form>\n        `;\n    }\n\n    handleChangedEvent(changedEvent) {\n        // this._config is readonly, copy needed\n        var newConfig = Object.assign({}, this._config);\n        if (changedEvent.target.id == \"header\") {\n            newConfig.header = changedEvent.target.value;\n        } else if (changedEvent.target.id == \"entity\") {\n            newConfig.entity = changedEvent.target.value;\n        }\n        const messageEvent = new CustomEvent(\"config-changed\", {\n            detail: { config: newConfig },\n            bubbles: true,\n            composed: true,\n        });\n        this.dispatchEvent(messageEvent);\n    }\n}"],"names":[],"version":3,"file":"bmw-card.js.map"}